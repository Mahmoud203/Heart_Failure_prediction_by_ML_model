

import sys
from PyQt5.QtWidgets import (
    QApplication, QMainWindow, QTextEdit, QLabel, QPushButton, QVBoxLayout, QHBoxLayout,
    QWidget, QFileDialog, QMessageBox, QDialog, QLineEdit, QStatusBar
)
from PyQt5.QtGui import QIcon, QPixmap
from PyQt5.QtCore import Qt, QTimer, QDateTime, QLocale
from stegano import lsb
QLocale.setDefault(QLocale(QLocale.English, QLocale.UnitedStates))

# Dark blue stylesheet
dark_stylesheet = """
    QMainWindow {
        background-image: url('qwe.png'); /* Set your background image path */
        background-position: center; /* Center the background image */
        background-repeat: no-repeat; /* Do not repeat the background image */
        background-size: cover; /* Cover the entire area of the window */    }    }
    QLabel, QStatusBar {
        color: white;
    }
    QPushButton {
        background-color: #3E4E5E;
        color: white;
        border-radius: 5px;
        padding: 5px;
    }
    QPushButton:hover {
        background-color: #5E6E7E;
    }
    QTextEdit {
        background-color: #2E2E3E;
        color: white;
        border: none;
    }
"""

class LoginDialog(QDialog):
    def __init__(self):
        super().__init__()
        self.setupUi()

    def setupUi(self):
        self.setWindowTitle("Login")
        self.setFixedSize(500, 250)  # Adjust size as needed
        self.setWindowIcon(QIcon('7781678.png'))  # Set the path to your window icon

        # Set the stylesheet for the dialog, including a background image
        self.setStyleSheet("""
            QDialog {
                background-image: url('v627-aew-42-technologybackground.jpg');  /* Set the path to your background image */
                background-position: center; /* Center the background image */
                background-repeat: no-repeat; /* Do not repeat the background image */
                background-size: cover; /* Cover the entire area of the dialog */
            }
            QLabel {
                color: white;
            }
            QLineEdit {
                background-color: #2E2E3E;
                color: white;
                border-radius: 5px;
                padding: 5px;
            }
            QPushButton {
                background-color: #3E4E5E;
                color: white;
                border-radius: 5px;
                padding: 5px;
                margin-top: 10px;
            }
            QPushButton:hover {
                background-color: #5E6E7E;
            }
        """)

        self.username = QLineEdit(self)
        self.password = QLineEdit(self)
        self.password.setEchoMode(QLineEdit.Password)

        self.loginButton = QPushButton("Login", self)
        self.loginButton.clicked.connect(self.handleLogin)

        layout = QVBoxLayout(self)
        layout.addWidget(QLabel("Username:"))
        layout.addWidget(self.username)
        layout.addWidget(QLabel("Password:"))
        layout.addWidget(self.password)
        layout.addWidget(self.loginButton)
    
    def handleLogin(self):
        if self.username.text() == "Admin" and self.password.text() == "0000":
            self.accept()
        else:
            QMessageBox.warning(self, "Error", "Incorrect username or password")

class SteganoApp(QMainWindow):
    def __init__(self):
        super().__init__()
        self.initUI()
        self.original_image_path = None
        self.encrypted_image_path = None

    def initUI(self):
        self.setStyleSheet(dark_stylesheet)
        self.setWindowIcon(QIcon('6783360.png'))  # Ensure you have this icon file

        # Labels for the original and encrypted images
        self.original_image_label = QLabel(self)
        self.original_image_label.setFixedSize(320, 240)
        self.encrypted_image_label = QLabel(self)
        self.encrypted_image_label.setFixedSize(320, 240)

        # TextEdit for messages
        self.text_edit = QTextEdit(self)

        # Buttons
        self.open_button = QPushButton('Open Image', self)
        self.hide_button = QPushButton('Hide Data', self)
        self.reveal_button = QPushButton('Show Data', self)
        self.clear_button = QPushButton('Clear', self)

        # Button listeners
        self.open_button.clicked.connect(self.open_image)
        self.hide_button.clicked.connect(self.hide_data)
        self.reveal_button.clicked.connect(self.reveal_data)
        self.clear_button.clicked.connect(self.clear_data)

        # Layout setup
        hbox_labels = QHBoxLayout()
        hbox_labels.addWidget(self.original_image_label)
        hbox_labels.addWidget(self.encrypted_image_label)

        hbox_buttons = QHBoxLayout()
        hbox_buttons.addWidget(self.open_button)
        hbox_buttons.addWidget(self.hide_button)
        hbox_buttons.addWidget(self.reveal_button)
        hbox_buttons.addWidget(self.clear_button)

        vbox = QVBoxLayout()
        vbox.addLayout(hbox_labels)
        vbox.addWidget(self.text_edit)
        vbox.addLayout(hbox_buttons)

        container = QWidget()
        container.setLayout(vbox)
        self.setCentralWidget(container)

        # Window settings
        self.setGeometry(300, 300, 700, 600)
        self.setWindowTitle('Steganography GUI')

        # Status bar and timer
        self.status_bar = QStatusBar()
        self.setStatusBar(self.status_bar)
        self.status_timer = QTimer(self)
        self.status_timer.timeout.connect(self.update_status_bar)
        self.status_timer.start(1000)  # Update every second
        self.show()

    def update_status_bar(self):
        locale = QLocale(QLocale.English, QLocale.UnitedStates)  # Set the locale explicitly
        current_time = QDateTime.currentDateTime()
        formatted_time = locale.toString(current_time, "dd-MM-yyyy hh:mm:ss")
        self.status_bar.showMessage(formatted_time)

    def open_image(self):
        options = QFileDialog.Options()
        file_name, _ = QFileDialog.getOpenFileName(self, "Open Image", "",
                                                   "Image Files (*.png *.jpg *.bmp);;All Files (*)", options=options)
        if file_name:
            self.load_image(file_name)

    def load_image(self, file_path):
        self.original_image_path = file_path
        pixmap = QPixmap(file_path)
        self.original_image_label.setPixmap(pixmap.scaled(self.original_image_label.width(), self.original_image_label.height(), Qt.KeepAspectRatio))
        self.encrypted_image_label.clear()

    def hide_data(self):
        if self.original_image_path:
            message = self.text_edit.toPlainText()
            if message:
                secret = lsb.hide(self.original_image_path, message)
                save_options = QFileDialog.Options()
                save_filename, _ = QFileDialog.getSaveFileName(self, "Save Image", "",
                                                               "PNG Image (*.png);;All Files (*)", options=save_options)
                if save_filename:
                    secret.save(save_filename)
                    self.encrypted_image_path = save_filename
                    encrypted_pixmap = QPixmap(self.encrypted_image_path)
                    self.encrypted_image_label.setPixmap(encrypted_pixmap.scaled(self.encrypted_image_label.width(), self.encrypted_image_label.height(), Qt.KeepAspectRatio))
                    QMessageBox.information(self, 'Success', 'Message encoded successfully into the image.')
                    self.text_edit.clear()
            else:
                QMessageBox.warning(self, 'Warning', 'Please enter a message to hide in the image.')
        else:
            QMessageBox.warning(self, 'Warning', 'Please open an image first.')

    def reveal_data(self):
        if self.original_image_path:
            message = lsb.reveal(self.original_image_path)
            if message:
                self.text_edit.setText(message)
            else:
                QMessageBox.warning(self, 'Error', 'No hidden message found in the image.')
        else:
            QMessageBox.warning(self, 'Warning', 'Please open an image first.')

    def clear_data(self):
        self.text_edit.clear()
        self.original_image_label.clear()
        self.encrypted_image_label.clear()
        self.original_image_path = None
        self.encrypted_image_path = None

def main():
    app = QApplication(sys.argv)
    login = LoginDialog()
    
    if login.exec_() == QDialog.Accepted:
        ex = SteganoApp()
        sys.exit(app.exec_())

if __name__ == '__main__':
    main()
